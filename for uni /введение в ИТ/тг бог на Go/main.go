package main

import (
	"bufio"
	"fmt"
	"log"
	"math/rand"
	"os"
	"path/filepath"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	rand.Seed(time.Now().UnixNano())

	// -----------------------------
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Ç–æ–∫–µ–Ω –∏ –ø–∞–ø–∫–∏
	// -----------------------------
	token := "7221783273:AAFaxIJH7u7NleHqgHOQ2lhC767KIkkt0_k"
	memesDir := "memes"
	jokesDir := "jokes"

	// -----------------------------
	// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
	// -----------------------------
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatalf("Failed to create bot: %v", err)
	}
	bot.Debug = false
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// -----------------------------
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é "/")
	// -----------------------------
	commands := []tgbotapi.BotCommand{
		{Command: "help", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–º"},
		{Command: "cats", Description: "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–º —Å –∫–æ—Ç–æ–º üê±"},
		{Command: "work", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—á–∏–π –º–µ–º üíº"},
		{Command: "food", Description: "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–º –ø—Ä–æ –µ–¥—É üçî"},
		{Command: "joke", Description: "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É üòÇ"},
	}

	if _, err := bot.Request(tgbotapi.NewSetMyCommands(commands...)); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: %v", err)
	} else {
		log.Println("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	}

	// -----------------------------
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
	// -----------------------------
	themes := map[string][]string{}
	themeKeywords := map[string][]string{
		"cats": {"–∫–æ—Ç", "–∫–æ—Ç–∏–∫", "–∫–æ—Ç—è—Ä–∞", "–∫–æ—Ç—ã", "–º–µ–º–∞—Å–∏–∫–∏ –ø—Ä–æ –∫–æ—Ç–æ–≤", "–º–µ–º –ø—Ä–æ –∫–æ—Ç–∏–∫–æ–≤"},
		"work": {"—Ä–∞–±–æ—Ç", "—Ä–∞–±–æ—Ç–∞", "job", "—Ä–∞–±–æ—á"},
		"food": {"–µ–¥–∞", "–ø–æ–µ—Å—Ç—å", "–∫—É—à–∞—Ç—å", "food"},
	}

	for theme := range themeKeywords {
		p := filepath.Join(memesDir, theme)
		files := gatherFiles(p)
		themes[theme] = files
	}

	// -----------------------------
	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	// -----------------------------
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		lower := strings.ToLower(strings.TrimSpace(update.Message.Text))
		if lower == "" {
			continue
		}

		// --------------------------------------
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ Telegram "/"
		// --------------------------------------
		switch lower {
		case "/start", "/help":
			name := update.Message.From.FirstName
			if name == "" {
				name = update.Message.From.UserName
			}
			msg := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–º—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"+
				"/cats ‚Äî –∫–æ—Ç–∏–∫–∏\n/work ‚Äî —Ä–∞–±–æ—Ç–∞\n/food ‚Äî –µ–¥–∞\n/joke ‚Äî —à—É—Ç–∫–∞\n\n"+
				"–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞: –∫–æ—Ç, —Ä–∞–±–æ—Ç–∞, –µ–¥–∞ –∏–ª–∏ —à—É—Ç–∫–∞.", name)
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, msg))
			continue

		case "/cats":
			sendRandomMeme(bot, update.Message.Chat.ID, "cats", themes)
			continue

		case "/work":
			sendRandomMeme(bot, update.Message.Chat.ID, "work", themes)
			continue

		case "/food":
			sendRandomMeme(bot, update.Message.Chat.ID, "food", themes)
			continue

		case "/joke":
			j, err := randomJoke(jokesDir)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à—É—Ç–∫—É."))
			} else {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, j))
			}
			continue
		}

		// --------------------------------------
		// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		// --------------------------------------
		if strings.Contains(lower, "—à—É—Ç–∫") || strings.Contains(lower, "–ø—Ä–∏–∫–æ–ª") {
			j, err := randomJoke(jokesDir)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à—É—Ç–∫—É."))
			} else {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, j))
			}
			continue
		}

		// –ú–µ–º—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
		matchedTheme := ""
		for theme, kws := range themeKeywords {
			for _, kw := range kws {
				if strings.Contains(lower, kw) {
					matchedTheme = theme
					break
				}
			}
			if matchedTheme != "" {
				break
			}
		}

		if matchedTheme == "" {
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID,
				"–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –∏–ª–∏ —Å–ª–æ–≤–∞: –∫–æ—Ç, —Ä–∞–±–æ—Ç–∞, –µ–¥–∞."))
			continue
		}

		sendRandomMeme(bot, update.Message.Chat.ID, matchedTheme, themes)
	}
}

// -----------------------------
// –§—É–Ω–∫—Ü–∏–∏
// -----------------------------

func sendRandomMeme(bot *tgbotapi.BotAPI, chatID int64, theme string, themes map[string][]string) {
	files := themes[theme]
	if len(files) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ç–µ–º–µ '%s'.", theme)))
		return
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	choice := files[rand.Intn(len(files))]

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ —Ç–µ–º–µ
	var caption string
	switch theme {
	case "cats":
		caption = "—Ä–∞–Ω–¥–æ–º–Ω—ã–µ –∫–æ—Ç—è—Ç–∫–∏"
	case "work":
		caption = "–∑–∞—Ä—è–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É"
	case "food":
		caption = "—Ç–≤–æ—ë –±–ª—é–¥–æ —Å–µ–≥–æ–¥–Ω—è"
	default:
		caption = fmt.Sprintf("–ú–µ–º –∏–∑ —Ç–µ–º—ã '%s'", theme)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(choice))
	photo.Caption = caption
	if _, err := bot.Send(photo); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º '%s': %v", choice, err)
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."))
	}
}

func gatherFiles(dir string) []string {
	var res []string
	_ = filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err != nil || info.IsDir() {
			return nil
		}
		ext := strings.ToLower(filepath.Ext(path))
		if ext == ".jpg" || ext == ".jpeg" || ext == ".png" || ext == ".gif" || ext == ".webp" {
			res = append(res, path)
		}
		return nil
	})
	return res
}

func randomJoke(dir string) (string, error) {
	entries, err := os.ReadDir(dir)
	if err != nil {
		return "", err
	}
	var files []string
	for _, e := range entries {
		if e.IsDir() {
			continue
		}
		if strings.ToLower(filepath.Ext(e.Name())) == ".txt" {
			files = append(files, filepath.Join(dir, e.Name()))
		}
	}
	if len(files) == 0 {
		return "", fmt.Errorf("no jokes")
	}
	choice := files[rand.Intn(len(files))]
	f, err := os.Open(choice)
	if err != nil {
		return "", err
	}
	defer f.Close()

	var sb strings.Builder
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		sb.WriteString(scanner.Text())
		sb.WriteString("\n")
	}
	return sb.String(), nil
}
