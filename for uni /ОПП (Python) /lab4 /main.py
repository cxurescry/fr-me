'''
для корректного отображения нужно открыть терминал и прописать:
pip install matplotlib numpy
таким образом будут установлены необходимые для работы модули
'''

# импортируем необходимые библиотеки
import matplotlib.pyplot as plt  # для построения графиков
import numpy as np  # для математических расчётов и массивов
import matplotlib.image as mpimg  # для загрузки изображений


# создаём фигуру с 6 областями (2 строки × 3 столбца)
# figsize — задаёт общий размер рисунка в дюймах (16 x 12)
fig, axs = plt.subplots(2, 3, figsize=(16, 12))


# 1.1 — первая область: загрузка фотографии или иллюстрации
try:
    # загружаем изображение (укажи путь к своему файлу)
    img = mpimg.imread("/Users/luaew/Downloads/walloutside2.jpg")

    # отображаем фото в первой области (ячейка [0,0])
    axs[0, 0].imshow(img)

    # добавляем заголовок к области
    axs[0, 0].set_title("Моя фотография / иллюстрация")
    
except FileNotFoundError:
    
    # если файл не найден, выводим текст вместо фото
    axs[0, 0].text(0.5, 0.5, "Изображение не найдено",
                   ha='center', va='center', fontsize=14)
    
# убираем оси, чтобы фото выглядело аккуратно
axs[0, 0].axis('off')

# 1.2 — вторая область: стандартный график Python с заливкой

# создаём массив значений x от 0 до 10 с шагом
x = np.linspace(0, 10, 200)

# вычисляем y = sin(x)
y = np.sin(x)

# строим график
axs[0, 1].plot(x, y, color='blue')
# добавляем заливку под кривой
axs[0, 1].fill_between(x, y, color='lightblue', alpha=0.5)
# добавляем заголовок
axs[0, 1].set_title("Стандартный график Python с заливкой")


# 2.1 — третья область: столбчатая диаграмма с аннотацией

categories = ['A', 'B', 'C', 'D']  # подписи категорий
values = [12, 7, 9, 15]  # значения

# строим столбцы
bars = axs[0, 2].bar(categories, values, color='skyblue')
# добавляем заголовок
axs[0, 2].set_title("Столбчатая диаграмма с аннотацией")

# подписываем значения над столбцами
for bar in bars:
    axs[0, 2].text(bar.get_x() + bar.get_width() / 2,  # центр столбца
                   bar.get_height() + 0.3,  # чуть выше верхушки
                   str(bar.get_height()),  # значение
                   ha='center', fontsize=10)

# 2.2 — четвёртая область: график функций с легендой

# создаём значения x в диапазоне [-5; 5]
x = np.linspace(-5, 5, 300)

# строим две функции: y = x^2 и y = sin(x)
axs[1, 0].plot(x, x ** 2, label='y = x²', color='red')
axs[1, 0].plot(x, np.sin(x), label='y = sin(x)', color='green')

# добавляем заголовок и легенду
axs[1, 0].set_title("Графики функций с легендой")
axs[1, 0].legend()

# 2.3 — пятая область: диаграмма рассеяния (scatter)

# генерируем случайные точки
x = np.random.rand(50)
y = np.random.rand(50)

# строим scatter-график
axs[1, 1].scatter(x, y, color='purple')
axs[1, 1].set_title("Диаграмма рассеяния (разброс)")

# 2.4 — шестая область: график фигур Лиссажу

# генерируем значения параметра t
t = np.linspace(0, 2 * np.pi, 1000)

# определяем координаты фигур Лиссажу
x = np.sin(3 * t + np.pi / 2)
y = np.sin(4 * t)

# строим график
axs[1, 2].plot(x, y)
axs[1, 2].set_title("Фигуры Лиссажу")


# подгоняем расстояние между графиками, чтобы не было наложений
plt.tight_layout()

# сохраняем готовый рисунок в файл (в той же папке)
plt.savefig("lab_4_5_result.png", dpi=300)

# отображаем итоговый рисунок на экране
plt.show()
