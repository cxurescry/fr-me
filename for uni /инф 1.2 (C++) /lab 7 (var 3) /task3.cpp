#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
using namespace std;

int main() {
    // инициализация числа n и массива Z(n)
    cout << "Введите N (>= 3): " << endl;
    int n; cin >> n;
    vector <int> Z(n);

    random_device rd; // создает объект, представляющий "истинное" случайное число на основе аппаратного источника энтропии (1)
    mt19937_64 gen(rd()); // Создаёт генератор случайных чисел типа Mersenne Twister 19937 и инициализирует его числом из rd().
    uniform_int_distribution<> dist(0, 20);
    // Определяет распределение случайных чисел — в данном случае равномерное целочисленное распределение от 0 до 20 включительно.

    // заполнение и вывод массива
    cout << "Массив Z(n): " << "[ ";
    for (int i = 0; i < n; i++) {
        int el = dist(gen);
        Z[i] = el;
        cout << Z[i] << " ";
    }
    cout << "]" << endl;

    // гномья сортировка (2)
    int i = 0;
    while (i < n) {
        if (i == 0 || Z[i] >= Z[i - 1]) i++;
        else {
            swap(Z[i], Z[i - 1]);
            i--;
        }
    }

    // вывод массива
    cout << "Массив Z(n) (гномья сортировка): [ ";
    for (auto value : Z) cout << value << " ";
    cout << "]" << endl;
}

/*
(1) - устройство или механизм внутри компьютера, который умеет выдавать непредсказуемые случайные биты данных.

(2) - псевдокод гномьей сортировки

procedure GnomeSort(A[1..n])
    i ← 1                       // начинаем с первого элемента
    while i ≤ n do              // пока не пройдем весь массив
        if i = 1 then           // если в начале — шаг вперед
            i ← i + 1
        else if A[i] ≥ A[i - 1] then   // если порядок верный
            i ← i + 1                  // шаг вперед
        else                            // если элементы стоят неправильно
            swap A[i] and A[i - 1]      // меняем их местами
            i ← i - 1                   // шаг назад (гном возвращается)
        end if
    end while
end procedure

Пример работы
A = [5, 3, 2, 4, 1]
Шаги:
i=1 → 5 ≥ 5? да → i=2
i=2 → 3 < 5 → swap → [3, 5, 2, 4, 1], i=1
i=1 → i=2
i=2 → 5 ≥ 3? да → i=3
i=3 → 2 < 5 → swap → [3, 2, 5, 4, 1], i=2
i=2 → 2 < 3 → swap → [2, 3, 5, 4, 1], i=1
i=1 → i=2
i=2 → 3 ≥ 2? да → i=3
i=3 → 5 ≥ 3? да → i=4
i=4 → 4 < 5 → swap → [2, 3, 4, 5, 1], i=3
i=3 → 4 ≥ 3? да → i=4
i=4 → 5 ≥ 4? да → i=5
i=5 → 1 < 5 → swap → [2, 3, 4, 1, 5], i=4
i=4 → 1 < 4 → swap → [2, 3, 1, 4, 5], i=3
i=3 → 1 < 3 → swap → [2, 1, 3, 4, 5], i=2
i=2 → 1 < 2 → swap → [1, 2, 3, 4, 5], i=1
i=1 → i=2 → i=3 → i=4 → i=5 → i=6 → конец
*/
