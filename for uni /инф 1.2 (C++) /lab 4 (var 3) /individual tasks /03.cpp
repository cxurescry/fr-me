// task3.cpp
#include <bits/stdc++.h>
using namespace std;

/*
Сформируем 8 строк (MSB слева) следующего рисунка (пример):
11000011
01100110
00111100
00011000
00011000
00111100
01100110
11000011

Каждая строка строится через сдвиги и побитовое OR.
Выведем символы: '█' для 1 и ' ' для 0 (если терминал не поддерживает, замените на '#' и ' ').
*/

int main() {
    vector<uint8_t> rows(8, 0);

    // формирование строк через сдвиг и OR (MSB = бит 7)
    rows[0] = (1 << 7) | (1 << 6) | (1 << 1) | (1 << 0); // 11000011
    rows[1] = (1 << 6) | (1 << 5) | (1 << 2) | (1 << 1); // 01100110
    rows[2] = (1 << 5) | (1 << 4) | (1 << 3) | (1 << 2); // 00111100
    rows[3] = (1 << 4) | (1 << 3);                       // 00011000
    rows[4] = (1 << 4) | (1 << 3);                       // 00011000
    rows[5] = rows[2];                                   // 00111100
    rows[6] = rows[1];                                   // 01100110
    rows[7] = rows[0];                                   // 11000011

    // выводим картинку
    for (int r = 0; r < 8; ++r) {
        for (int bit = 7; bit >= 0; --bit) {
            bool one = (rows[r] >> bit) & 1;
            cout << (one ? '█' : ' ');
        }
        cout << "\n";
    }

    // Для наглядности также выведем числовые (bin/hex) представления:
    cout << "\nBinary rows:\n";
    for (int r = 0; r < 8; ++r) {
        for (int bit = 7; bit >= 0; --bit) cout << (((rows[r] >> bit) & 1) ? '1' : '0');
        cout << "  0x" << std::hex << setw(2) << setfill('0') << (int)rows[r] << std::dec << "\n";
    }

    return 0;
}
